<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <client_script><![CDATA[function($timeout) {
  /* widget controller */
  var c = this;
	c.data.task_info = false;
	c.data.day_info = false;
	c.data.stories_status = false;
	
	c.display_counter = function(x) {
		if (x < 60) return '' + x + 's';
		var min = Math.floor(x/60);
		var sec = x - (min *60);
		if (x < 3600) return '' + min  + 'min '+ sec + 's';
		var h = Math.floor(x/3600);
		min = Math.floor((x - (h*3600))/60);
		sec = x - (h * 3600) - (min * 60);
		return '' + h + 'h ' + min  + 'min '+ sec + 's';
		
	};
	

	
	c.changeState = function(state) {
		c.data.story_state = state.toString();
		//if (state == '2') c.data.counter = 0;
		if (state == '2'){
			var comment = angular.element( document.querySelector( '#story_comment' ) );
			//console.log('comment = ',comment.context.value);
			c.data.comment = comment.context.value;
		}
		c.server.update();
	}
	
	c.changeActive = function(task) {

		c.data.story_number = task.number.toString();
		c.data.story_short_description = task.short_description.toString();
		c.data.story_description = task.description.toString();
		c.data.story_state = '-5';
		c.server.update();
	}
	
	c.tick = function() {

		c.data.counter++;
		c.data.counter_display = c.display_counter(c.data.counter);
	  $timeout(c.tick, 1000);
		
	};
	
	c.toogle = function(){
		c.data.task_info = !c.data.task_info;
		
	}
	
	c.toogle_day_info = function(){
		c.data.day_info = !c.data.day_info;
		
	}
	
	c.toogle_stories = function(){
		c.data.stories_status = !c.data.stories_status;
		c.server.update();
		
	}
	
	c.logAndImport = function(){
		var user = $('#usr');
		var pwd = $('#pwd');
		var open = $('#open')[0].checked;
		var testing = $('#testing')[0].checked;
		var uat = $('#uat')[0].checked;
		var draft = $('#draft')[0].checked;
		var require_acceptance = $('#require_acceptance')[0].checked;
		var estimate = $('#estimate')[0].checked;
		var story_acceptance = $('#story_acceptance')[0].checked;
		var complain = $('#complain')[0].checked;
		var ready = $('#ready')[0].checked;
		var architecture    = $('#architecture')[0].checked;
		var closed          = $('#closed')[0].checked;
		var work_in_progres = $('#work_in_progres')[0].checked;
		c.data.user = user[0].value;
		c.data.user_pwd = pwd[0].value;
		c.data.importStories = true;
		//console.log(user[0].value,pwd[0].value,chk001[0].checked);
		if (work_in_progres) c.data.state_work_in_progres = '%5EORstate%3D302'; else c.data.state_work_in_progres = '';
		if (architecture)    c.data.state_architecture    = '%5EORstate%3D306'; else c.data.state_architecture    = '';
		if (closed)          c.data.state_closed          = '%5EORstate%3D307'; else c.data.state_closed          = '';
		if (open)            c.data.state_open            = '%5EORstate%3D301'; else c.data.state_open = '';
		if (testing)         c.data.state_testing         = '%5EORstate%3D303'; else c.data.state_testing = '';
		if (uat)             c.data.state_uat             = '%5EORstate%3D304'; else c.data.state_uat = '';
		if (draft)           c.data.state_draft           = '%5EORstate%3D305'; else c.data.state_draft = '';
		if (require_acceptance) c.data.state_require_acceptance = '%5EORstate%3D311'; else c.data.state_require_acceptance = '';
		if (estimate)           c.data.state_estimate     = '%5EORstate%3D312'; else c.data.state_estimate = '';
		if (story_acceptance)   c.data.state_story_acceptance = '%5EORstate%3D313'; else c.data.state_story_acceptance = '';
		if (complain)           c.data.state_complain     = '%5EORstate%3D314'; else c.data.state_complain = '';
		if (ready)              c.data.state_ready        = '%5EORstate%3D315'; else c.data.state_ready = '';
		c.data.loading = "LOADING...";
		c.server.update();
		
	}
	
	c.tick();
	
	c.delete_time_card = function(card){	
		var obj = {
			"task" : c.data.story_number.toString(),
			"card_date" : card.slice(0,19).toString()
		}
		c.data.card_to_delete = card;
		c.server.update();
		//console.log(obj);
		
		
	}
	
	
	
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.iconlink a label,h2 {
  display: block;
  font-size: 2.5rem;
  font-weight: 300;
  line-height: 1.1;
  padding: 0;
  margin: 0 0 10px 0;
}

/* TOP ICON ---------- */

a.top_icon {
  display: block;
  padding: 20px;
  text-align: center;
}

a.top_icon .fa {
  display: block;
  text-align: center;
}

/* CIRCLE ICON ---------- */

a.circle_icon {
  display: block;
  padding: 20px 0px 20px 70px;
  position: relative;
}

a.circle_icon .fa {
  position:absolute;
  left: 0px;
  top: 10px;
}

/* COLOR BOX ---------- */

a.color_box {
  display: block;
  position: relative;
  padding: 20px 20px 20px 82px;
  border-radius: 4px;
  margin-bottom: 20px;
}

a.color_box .fa {
  position:absolute;
  left: 20px;
  top: 20px;
  width:42px;
  text-align: center;
}

.icon-link-background-primary {
  background-color: $brand-primary;
}

.icon-link-background-info {
  background-color: $brand-info;
}

.icon-link-background-success {
  background-color: $brand-success;
}

.icon-link-background-warning {
  background-color: $brand-warning;
}

.icon-link-background-danger {
  background-color: $brand-danger;
}

.icon-link-background-default {
  background-color: $brand-primary;
}

.text-primary {
  color: $brand-primary;
  
  &amp;:hover {
    color: darken($brand-primary, 20%);
  }
}

.text-info {
  color: $brand-info;
  
  &amp;:hover {
    color: darken($brand-info, 20%);
  }
}

.text-success {
  color: $brand-success;
  
  &amp;:hover {
    color: darken($brand-success, 20%);
  }
}

.text-warning {
  color: $brand-warning;
  
  &amp;:hover {
    color: darken($brand-warning, 20%);
  }
}

.text-danger {
  color: $brand-danger;
  
  &amp;:hover {
    color: darken($brand-danger, 20%);
  }
}

.text-default {
  color: $brand-primary;
  
  &amp;:hover {
    color: darken($brand-primary, 20%);
  }
}

.badge.active {
    background-color: darken($brand-danger, 20%);
}

.counter {
	color: $brand-danger;
  font-weight: bold;
}

#story_comment {

}

.toogler {
margin-bottom : 15px;
}</css>
        <data_table>sp_instance_link</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list>title,short_description,glyph,class_name,type,sc_category,url,kb_article,kb_topic,kb_category,sc_cat_item,sp_page,color</field_list>
        <has_preview>false</has_preview>
        <id>icon-active-story</id>
        <internal>false</internal>
        <link/>
        <name>Icon active story</name>
        <option_schema>[{"name":"link_template","label":"Template","type":"choice","choices":[{"label":"Top Icon","value":"Top Icon"},{"label":"Circle Icon","value":"Circle Icon"},{"label":"Color Box","value":"Color Box"}]}]</option_schema>
        <public>true</public>
        <roles/>
        <script><![CDATA[(function(){
	var gr = $sp.getInstanceRecord();
	data.href = $sp.getMenuHREF(gr);
	data.href = "";
	data.target = options.target || "";
	data.target = "";
	data.list = [];
	data.counter = 0;
	data.story_list = [];
	data.card_to_delete = "";
	data.importStories = false;
	data.import_answer = "";
	data.user = "";
	data.user_pwd = "";
	data.foundUser = "";
	

	data.state_work_in_progres = '';
	data.state_architecture    = '';
	data.state_closed          = '';
	data.state_open = '';
	data.state_testing = '';
	data.state_uat = '';
	data.state_draft = '';
	data.state_require_acceptance = '';
	data.state_estimate = '';
	data.state_story_acceptance = '';
	data.state_complain = '';
	data.state_ready = '';
	data.loading = '';

	
	var story = "";
	
	
	story = new GlideRecord('x_145082_stories_story');
			story.addQuery('state',2).addOrCondition('state',-5);
			story.setLimit(1);
			story.query();

			if (story.next()) {
				data.story_number = story.number.toString();
				data.story_short_description = story.short_description.toString();
				data.story_description = story.description.toString();
				data.story_state = story.state.toString();
				data.story_time_worked = story.time_worked.toString().slice(11);
				data.active = story.number.toString();
				data.counter_display = "0s";
				
				  var card_info = new GlideRecord('task_time_worked');
				  card_info.addQuery('task',story.sys_id);
					card_info.orderByDesc('sys_updated_on');
					card_info.query();

					while (card_info.next()) {
						var info = {
								"text" : card_info.sys_updated_on.toString() + " : " +
								card_info.comments.toString().toUpperCase() + " : " +
								card_info.time_worked.slice(11),
							  "id" : card_info.sys_id.toString()
						}
						data.story_list.push(info);
					}
				
				
				if (story.state == 2) {
					var end = new GlideDateTime().getNumericValue();
					var start = story.work_start.dateNumericValue();	
					var diff = end-start;					
					data.counter = Math.floor(diff/1000);
					data.counter_display = display_counter(data.counter);
				}
			} else {
				data.story_number = "";
				data.story_short_description = "";
				data.story_description = "";
				data.story_state = "";
				
			}
	
			
	
	if (input) {
			
		  if (input.card_to_delete != "") {
				var card_to_delete = new GlideRecord('task_time_worked');
					card_to_delete.addQuery('sys_id',input.card_to_delete);
					card_to_delete.setLimit(1);
					card_to_delete.query();
				if (card_to_delete.next()) {
					
					card_to_delete.task = '00000000000000000000000000000000';
					card_to_delete.update();
				} 
			} 

			if (data.active != input.story_number){
				
				story = new GlideRecord('x_145082_stories_story');
				story.addQuery('number',input.story_number);
				story.setLimit(1);
				story.query();

				if (story.next()) {
					story.state = -5;
					story.update();	
					
					var card = new GlideRecord('task_time_worked');
					card.addQuery('task',story.sys_id);
					card.orderByDesc('sys_updated_on');
					card.setLimit(1);
					card.query();

					while (card.next()) {
						card.comments = input.comment;
						card.update();
					}
					data.story_number = story.number.toString();
					data.story_short_description = story.short_description.toString();
					data.story_description = story.description.toString();
					data.story_state = story.state.toString();	
					data.story_time_worked = story.time_worked.toString().slice(11);
					
					var card_info2 = new GlideRecord('task_time_worked');
				  card_info2.addQuery('task',story.sys_id);
					card_info2.orderByDesc('sys_updated_on');
					card_info2.query();
					data.story_list = [];
					while (card_info2.next()) {
						var info2 = {
								"text" : card_info2.sys_updated_on.toString() + " : " +
								card_info2.comments.toString().toUpperCase() + " : " +
								card_info2.time_worked.slice(11),
							  "id" : card_info2.sys_id.toString()
						}
						data.story_list.push(info2);
					}
				}					
			}
		 else {

			  story = new GlideRecord('x_145082_stories_story');
				story.addQuery('number',data.story_number);
				story.setLimit(1);
				story.query();
			 
			if (story.next()) {
				if (data.story_state == 2) story.state = -5;
				else if (data.story_state == -5) {
					story.state = 2;
					story.close_notes = input.comment;
				}
				data.story_state = input.story_state;
				
				story.update();
				data.story_time_worked = story.time_worked.toString().slice(11);
				
				if (story.state == '-5'){
					var card = new GlideRecord('task_time_worked');
					card.addQuery('task',story.sys_id);
					card.orderByDesc('sys_updated_on');
					card.setLimit(1);
					card.query();

					while (card.next()) {
						card.comments = input.comment;
						
					}
				}
				
				  var card_info3 = new GlideRecord('task_time_worked');
				  card_info3.addQuery('task',story.sys_id);
					card_info3.orderByDesc('sys_updated_on');
					card_info3.query();
					data.story_list = [];
					while (card_info3.next()) {
						var info3 = {
								"text" : card_info3.sys_updated_on.toString() + " : " +
								card_info3.comments.toString().toUpperCase() + " : " +
								card_info3.time_worked.slice(11),
							  "id" : card_info3.sys_id.toString()
						}
						data.story_list.push(info3);
					}
			}
			
		 }	
			
	}
	
	story = new GlideRecord('x_145082_stories_story');
			story.addQuery('state',1).addOrCondition('state',2).addOrCondition('state',-5);
			story.orderBy('short_description');		
			story.query();

			while (story.next()) {
				var task = {
				"number" 						: story.number.toString(),
				"short_description" : story.short_description.toString(),
				"description" 			: story.description.toString(),
				"state" 						: story.state.toString(),
				"time_worked" 			: story.time_worked.toString().slice(11)
				};
					
				data.list.push(task);
				
			}
	
			var today = new GlideTime();
		var begin = today.getValue().toString().slice(0,10);
		var x = new GlideDateTime(begin);
		var day = parseInt(x.getDayOfWeekLocalTime());

		if (day == 1) day = -7
		else day = -(day-1);

		data.day_list = [];

		x.addDaysLocalTime(day);
		var monday = x.getValue();

		x.addDaysLocalTime(+1);
		var tuesday = x.getValue();
		x.addDaysLocalTime(+1);
		var wednesday = x.getValue();
		x.addDaysLocalTime(+1);
		var thursday = x.getValue();
		x.addDaysLocalTime(+1);
		var friday = x.getValue();

		data.day_list.push('MONDAY');
		var card = new GlideRecord('task_time_worked');
		card.addQuery('sys_updated_on','>',monday);
		card.addQuery('sys_updated_on','<',tuesday);
		card.orderBy('task.short_description');
		card.query();
		while (card.next()){ data.day_list.push("  - " + card.task.short_description + " " +card.task.description + " : " +card.comments + " [" + card.time_worked.slice(11) + "]"); }

		data.day_list.push('TUESDAY');
		var card = new GlideRecord('task_time_worked');
		card.addQuery('sys_updated_on','>',tuesday);
		card.addQuery('sys_updated_on','<',wednesday);
		card.orderBy('task.short_description');
		card.query();
		while (card.next()){ data.day_list.push("  - " + card.task.short_description + " " +card.task.description + " : " +card.comments + " [" + card.time_worked.slice(11) + "]"); }

		data.day_list.push('WEDNESDAY');
		var card = new GlideRecord('task_time_worked');
		card.addQuery('sys_updated_on','>',wednesday);
		card.addQuery('sys_updated_on','<',thursday);
		card.orderBy('task.short_description');
		card.query();
		while (card.next()){ data.day_list.push("  - " + card.task.short_description + " " +card.task.description + " : " +card.comments + " [" + card.time_worked.slice(11) + "]"); }

		data.day_list.push('THURSDAY');
		var card = new GlideRecord('task_time_worked');
		card.addQuery('sys_updated_on','>',thursday);
		card.addQuery('sys_updated_on','<',friday);
		card.orderBy('task.short_description');
		card.query();
		while (card.next()){ data.day_list.push("  - " + card.task.short_description + " " +card.task.description + " : " +card.comments + " [" + card.time_worked.slice(11) + "]"); }

		data.day_list.push('FRIDAY');
		var card = new GlideRecord('task_time_worked');
		card.addQuery('sys_updated_on','>',friday);
		card.orderBy('task.short_description');
		card.query();
		while (card.next()){ 
			data.day_list.push("  - " + card.task.short_description + " " +card.task.description + " : " +card.comments + " [" + card.time_worked.slice(11) + "]"); 
		}
	
	function display_counter(x) {
		if (x < 60) return '' + x + 's';
		var min = Math.floor(x/60);
		var sec = x - (min *60);
		if (x < 3600) return '' + min  + 'min '+ sec + 's';
		var h = Math.floor(x/3600);
		min = Math.floor((x - (h*3600))/60);
		sec = x - (h * 3600) - (min * 60);
		return '' + h + 'h ' + min  + 'min '+ sec + 's';
		
	}
	
	if (input){
		
		if (input.importStories){
			

			var user = input.user;
			var password = input.user_pwd;
			
			var requestUser = new sn_ws.RESTMessageV2();
			requestUser.setBasicAuth(user,password);
			requestUser.setRequestHeader("Accept","application/json");
			requestUser.setEndpoint('https://support.spoc.pl/api/now/table/sys_user?sysparm_query=email%3D'+	user +	'&sysparm_fields=sys_id');

			requestUser.setHttpMethod('GET');
			data.loading = 'LOADING...';
			var responseUser = requestUser.execute();
			
			if (responseUser.getStatusCode() != 200) {
				data.loading = "";
				data.import_answer = " ERROR: " + responseUser.getStatusCode()+' ';
			}
			else {
				  
				  var objUser = JSON.parse(responseUser.getBody());
		      data.foundUser = objUser.result.length.toString();
					var foundUser = objUser.result[0].sys_id.toString();

					var request = new sn_ws.RESTMessageV2(); 
					
					var q = 'https://support.spoc.pl/api/now/table/x_mwtso_ppm_story?sysparm_query=state%3D'+
					input.state_work_in_progres + 
					input.state_architecture + 
					input.state_closed + 
					input.state_open +
					input.state_testing +
					input.state_uat +
					input.state_draft +
					input.state_require_acceptance +
					input.state_estimate +
					input.state_story_acceptance +
					input.state_complain +
					input.state_ready +
					'&sysparm_fields=number%2Cshort_description%2Cstate&assigned_to='+
					foundUser;
					
				request.setEndpoint(q);

					request.setHttpMethod('GET');
					request.setBasicAuth(user,password);
					request.setRequestHeader("Accept","application/json");

					var response = request.execute();
										
				  if (response.getStatusCode() != 200) {
						data.import_answer = " ERROR: " + responseUser.getStatusCode()+' ';
						data.loading = '';
					}
				  else {
						  data.loading = '';
							var obj = JSON.parse(response.getBody());
							data.import_answer =  " "+obj.result.length.toString() + " stories imported! ";
							
						  var del = new GlideRecord('x_145082_stories_story');
						  
						  del.query();
						  while (del.next()) {
								del.deleteRecord();
							}
						data.list = [];
						
						for (var i=0;i<obj.result.length;i++) {
							
							story = new GlideRecord('x_145082_stories_story');
							story.addQuery('short_description',obj.result[i].number);
							story.setLimit(1);							
							story.query();
							if(story.next()) {
								story.state = 1;
								story.description = obj.result[i].short_description;
								story.update();
							}
							else {
								story.initialize();
								story.state = 1;
								story.short_description = obj.result[i].number;
								story.description = obj.result[i].short_description;
								story.insert();								
							}
						}
					}
				}
		 }
		}
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-01-06 13:22:31</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>f6d0b4f40f678b00572fadabe1050eed</sys_id>
        <sys_mod_count>348</sys_mod_count>
        <sys_name>Icon active story</sys_name>
        <sys_package display_value="Stories" source="x_145082_stories">90bd63e40fe38b00572fadabe1050ea1</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Stories">90bd63e40fe38b00572fadabe1050ea1</sys_scope>
        <sys_update_name>sp_widget_f6d0b4f40f678b00572fadabe1050eed</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-01-17 23:01:06</sys_updated_on>
        <template><![CDATA[<div class="iconlink">

  <a ng-if="(data.story_state == '2')"  class="top_icon" ng-href="{{::data.href}}" target="{{::data.target}}" >
    <div class="m-b fa fa-{{::options.glyph}} fa-4x {{::options.class_name}} text-{{::options.color}} " ng-click="c.changeState('-5')"><br>STOP</div>
	
    <h2 ng-click="c.toogle()">{{data.story_short_description}} : <span class="counter">{{data.counter_display}}</span>
      <br> <span class="text-muted">{{data.story_description}}</span>
      <br> <span class="badge badge-danger active">{{data.story_time_worked}}</span>
      <br> <span ng-if="(data.comment != '')"><i>{{data.comment}}</i></span>
    </h2>       
    
  </a>
  
  <a ng-if="(data.story_state == '-5')"  class="top_icon" ng-href="{{::data.href}}" target="{{::data.target}}">
    <div class="m-b fa fa-bell-slash fa-4x {{::options.class_name}} text-danger" ng-click="c.changeState('2')"><br>START</div>

    <h2 ng-click="c.toogle()">{{data.story_short_description}} 
      <br><span class="text-muted">{{data.story_description}}</span>
      <br><span class="badge badge-danger active">{{data.story_time_worked}}</span>
    </h2>
    <p>Work description</p>
    <div><input id="story_comment"></div>
    
    
  </a>
  <div ng-if="(data.task_info == true)">
    work time cards
  <ul  class="list-group">
      <li ng-repeat="info in data.story_list"  class="list-group-item list-group-item-info" >
        {{info.text}}  
      </li>
	 </ul>
  </div>
 
  <button ng-if="(data.story_number == '')" type="button" class="btn btn-danger btn-block toogler">NO ACTIVE STORIES</button>
  
  
  <button href="#yourstories" data-toggle="collapse" type="button" class="btn btn-primary btn-block toogler" ng-click="c.toogle_stories()">YOUR STORIES 
    <span ng-click="c.toogle_stories()" ng-if="(data.stories_status == false)" class=" fa fa-chevron-down "></span>
    <span ng-click="c.toogle_stories()" ng-if="(data.stories_status == true)" class=" fa fa-chevron-up "></span>
  </button>
  <div id="yourstories" class='collapse'>
    <div   class="list-group">
      <a ng-repeat="task in data.list"  class="list-group-item" ng-class="{active: task.number == data.story_number}" ng-click="c.changeActive(task)">
        {{task.short_description}}  
        <span class="badge">{{task.time_worked}}</span>
        <br>
       {{task.description}}
      </a>
      <div ng-if="(data.list.length == 0)">NO STORIES - you have to import some stories...</div>
    </div>
  </div>

  <button href="#lastweek" data-toggle="collapse" type="button" class="btn btn-primary btn-block toogler" ng-click="c.toogle_day_info()">LAST WEEK INFO
    <span ng-click="c.toogle_day_info()" ng-if="(data.day_info == false)" class=" fa fa-chevron-down "></span>
    <span ng-click="c.toogle_day_info()" ng-if="(data.day_info == true)" class=" fa fa-chevron-up "></span>
  </button>
  <div id="lastweek" class="collapse"  >
		Your work cards during last week:
    <ul  class="list-group">
      <li ng-repeat="day in data.day_list"  class="list-group-item list-group-item-primary" >
        {{day}}  
      </li>
	 </ul>
  </div>
  
  <button href="#login" data-toggle="collapse" type="button" class="btn btn-primary btn-block toogler" >IMPORT STORIES ASSIGNED TO YOU</button>
  <div id="login" class="collapse"  >
    
	<div class="col-md-6">
    <div class="checkbox">
      <label><input id="open"    type="checkbox" value="301">Open</label>
    </div>
    <div class="checkbox">
      <label><input id="work_in_progres" type="checkbox" value="302">Work in progress</label>
    </div>
    <div class="checkbox">
      <label><input id="testing" type="checkbox" value="303">Testing</label>
    </div>
    <div class="checkbox">
      <label><input id="uat" type="checkbox" value="304">UAT</label>
    </div>
    <div class="checkbox">
      <label><input id="draft" type="checkbox" value="305">Draft</label>
    </div>
    <div class="checkbox">
      <label><input id="architecture"    type="checkbox" value="306">Architecture</label>
    </div>
   </div>
   <div class="col-md-6">
    
    <div class="checkbox">
      <label><input id="closed"    type="checkbox" value="307">Closed</label>
    </div>
    <div class="checkbox">
      <label><input id="require_acceptance" type="checkbox" value="311">Require acceptance</label>
    </div>
    <div class="checkbox">
      <label><input id="estimate" type="checkbox" value="312">Estimate</label>
    </div>
    <div class="checkbox">
      <label><input id="story_acceptance" type="checkbox" value="313">Story acceptance</label>
    </div>
     <div class="checkbox">
      <label><input id="complain" type="checkbox" value="314">Complain</label>
    </div>
    <div class="checkbox">
      <label><input id="ready" type="checkbox" value="315">Ready</label>
    </div>
   </div>
    
    <div class="form-group">
      <label for="usr">Support SPOC login:</label>
      <input type="text" class="form-control" id="usr">
    </div>
    <div class="form-group">
      <label for="pwd">Password:</label>
      <input type="password" class="form-control" id="pwd">
    </div>
    
    <button ng-if="(data.loading == '')" type="button" class="btn btn-primary btn-block toogler" ng-click="c.logAndImport()">IMPORT <span class="badge badge-light info">{{data.import_answer}}</span></button>
    <button ng-if="(data.loading != '')" type="button" class="btn btn-danger btn-block toogler" >LOADING....</button>
    <div></div>

    
    
    
  </div>

  
  
  


</div>]]></template>
    </sp_widget>
</record_update>
